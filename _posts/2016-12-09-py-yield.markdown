---
layout:     post
title:      "python的yield用法浅析"
subtitle:   "yield用法"
date:       2016-12-09
author:     “Aaron”
header-img: "img/post-06.jpg"
tags:
    - python
    - 后端
---

## 生成器概述

* 通常的for...in...循环中，in后面是一个数组，这个数组就是一个可迭代对象。它可以是mylist = [1, 2, 3]，也可以是mylist = [x*x for x in range(3)]。它的缺陷是所有数据都在内存中，如果有海量数据的话将会非常耗内存。而生成器通过迭代解决了问题，每次迭代可以读取它一次。因为用的时候才生成。比如 mygenerator = (x*x for x in range(3))，注意这里用到了()，它就不是数组，而上面的例子是[]。

* 生成器(generator)能够迭代的关键是它有一个next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常。带有 yield 的函数不再是一个普通函数，而是一个生成器generator，可用于迭代。

* 一个带有 yield 的函数就是一个生成器，yield 是一个类似 return 的关键字，迭代一次遇到yield时就返回yield后面的值。重点是：下一次迭代时，从上一次迭代遇到的yield后面的代码开始执行。简要理解：yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后开始。

## 以编程题目来展示 yield 的概念

**简单输出斐波那契數列前 N 个数**

```python
def fab(max):
    n, a, b = 0, 0, 1
    while n < max:
        print b
        a, b = b, a + b
        n = n + 1
```

执行fab(5),输出：

```python
>>> fab(5)
1
1
2
3
5
```

要提高 fab 函数的可复用性，最好不要直接打印出数列，而是返回一个 List。以下是 fab 函数改写后的第二个版本：

**输出斐波那契數列前 N 个数第二版**

```python
def fab(max):
    n, a, b = 0, 0, 1
    L = []
    while n < max:
        L.append(b)
        a, b = b, a + b
        n = n + 1
    return L
```

可以使用如下方式打印出 fab 函数返回的 List：

```python
>>> for n in fab(5):
       print n
1
1
2
3
5
```

改写后的 fab 函数通过返回 List 能满足复用性的要求,该函数在运行中占用的内存会随着参数 max 的增大而增大，如果要控制内存占用，最好不要用 List

来保存中间结果，而是通过 iterable 对象来迭代。例如:

**通过 iterable 对象来迭代**

```python
for i in range(1000): pass
```

会导致生成一个 1000 个元素的 List，而代码：

```python
for i in xrange(1000): pass
```

则不会生成一个 1000 个元素的 List，而是在每次迭代中返回下一个数值，内存空间占用很小。因为 xrange 不返回 List，而是返回一个 iterable 对象。

利用 iterable 我们可以把 fab 函数改写为一个支持 iterable 的 class，以下是第三个版本的 Fab：

**第三个版本**

```python
class Fab():
    def __init__(self, max):
        self.max = max
        self.n, self.a, self.b = 0, 0, 1

    def next(self):
        if self.n < self.max:
            r = self.b
            self.a, self.b = self.b, self.a + self.b
            self.n += 1
            return r
        raise StopIteration

    def __iter__(self):
        return self
```

```python
>>>fibs = Fab(5)
      for i in fibs:
        print i
1
1
2
3
5
```

如果我们想要保持第一版 fab 函数的简洁性，同时又要获得 iterable 的效果，yield 就派上用场了：

**使用 yield 的第四版**

```python
def fab(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        # print b
        a, b = b, a + b
        n = n + 1
```
第四个版本的 fab 和第一版相比，仅仅把 print b 改为了 yield b，就在保持简洁性的同时获得了 iterable 的效果。

```python
>>>for i in fab(5)
      print i
1
1
2
3
5
```

简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，*而是返回一个 iterable 对象！*

在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，*执行到 yield b 时，fab 函数就返回一个迭代值* ,下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。

也可以手动调用 fab(5) 的 next() 方法（因为 fab(5) 是一个 generator 对象，该对象具有 next() 方法），这样我们就可以更清楚地看到 fab 的执行流程：

```python
>>> f = fab(5)
 >>> f.next()
 1
 >>> f.next()
 1
 >>> f.next()
 2
 >>> f.next()
 3
 >>> f.next()
 5
 >>> f.next()
 Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
 StopIteration
```

当函数执行结束时，generator 自动抛出 StopIteration 异常，表示迭代完成。

**我们可以得出以下结论：**
*一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。*

如何判断一个函数是否是一个特殊的 generator 函数？可以利用 isgeneratorfunction 判断：

**使用 isgeneratorfunction 判断**

```python
>>> from inspect import isgeneratorfunction
 >>> isgeneratorfunction(fab)
 True
```

要注意区分 fab 和 fab(5)，fab 是一个 generator function，而 fab(5) 是调用 fab 返回的一个 generator，好比类的定义和类的实例的区别：

**类的定义和类的实例**

```python
>>> import types
 >>> isinstance(fab, types.GeneratorType)
 False
 >>> isinstance(fab(5), types.GeneratorType)
 True
```

fab 是无法迭代的，而 fab(5) 是可迭代的：

```python
>>> from collections import Iterable
>>> isinstance(fab, Iterable)
False
>>> isinstance(fab(5), Iterable)
True
```

每次调用 fab 函数都会生成一个新的 generator 实例，各实例互不影响：

```python
>>> f1 = fab(3)
 >>> f2 = fab(5)
 >>> print 'f1:', f1.next()
 f1: 1
 >>> print 'f2:', f2.next()
 f2: 1
 >>> print 'f1:', f1.next()
 f1: 1
 >>> print 'f2:', f2.next()
 f2: 1
 >>> print 'f1:', f1.next()
 f1: 2
 >>> print 'f2:', f2.next()
 f2: 2
 >>> print 'f2:', f2.next()
 f2: 3
 >>> print 'f2:', f2.next()
 f2: 5

```

## 另一个例子

另一个 yield 的例子来源于文件读取。如果直接对文件对象调用 read() 方法，会导致不可预测的内存占用。好的方法是利用固定长度的缓冲区来不断读取文件内容。通过 yield，我们不再需要编写读文件的迭代类，就可以轻松实现文件读取：

```python
def read_file(fpath):
    BLOCK_SIZE = 1024
    with open(fpath, 'rb') as f:
        while True:
            block = f.read(BLOCK_SIZE)
            if block:
                yield block
            else:
                return
```
