---
layout:     post
title:      "简述异步与同步 阻塞与非阻塞"
subtitle:   "阻塞与非阻塞、同步与异步"
date:       2017-01-28
author:     “Aaron”
header-img: "img/post-01.jpg"
tags:
    - 异步 同步
    - 阻塞 非阻塞
---

## 概览

在网络编程中会出现同步(synchronize)、异步(asynchronize)、阻塞(block)与非阻塞(unblock)。

* 异步与同步主要针对Client端:

(1)同步:
       所谓同步，就是在C端发起一个调用，在没有得到结果时，该调用不返回。即“必须要一件事接着一件事做，前一件事做完才有下一件事”
       在Browser/Server模式中(同步)，提交请求 --> 等待服务器处理 --> 处理完毕  在此过程中，客户端浏览器不参与其他任何事。
(2)异步:
       当C端一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。
       例如 ajax请求（异步）: 请求 通过事件触发 -—> 服务器处理（这是浏览器仍然可以作其他事情）--> 处理完毕。

* 阻塞、非阻塞主要针对Server端:

(1)阻塞:
       阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态,即线程暂停运行），函数只有在得到结果之后才会返回。

       有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。 例如，我们在socket中调用recv函数，如果缓冲区中没有数据，这个函数就会一直等待，直到有数据才返回。而此时，当前线程还会继续处理各种各样的消息。

       快递的例子：比如到你某个时候到A楼一层（假如是内核缓冲区）取快递，但是你不知道快递什么时候过来，你又不能干别的事，只能死等着。但你可以睡觉（进程处于休眠状态），因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。

(2)非阻塞:
       非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。

       还是等快递的例子：如果用忙轮询的方法，每隔5分钟到A楼一层(内核缓冲区）去看快递来了没有。如果没来，立即返回。而快递来了，就放在A楼一层，等你去取。

1. 同步，就是我客户端（c端调用者）调用一个功能，该功能没有结束前，我（c端调用者）死等结果。

2. 异步，就是我（c端调用者）调用一个功能，不需要知道该功能结果，该功能有结果后通知我（c端调用者）即回调通知。

同步/异步主要针对C端， 但是跟S端不是完全没有关系，同步/异步机制必须S端配合才能实现.同步/异步是由C端自己控制，但是S端是否阻塞/非阻塞， C端完全不需要关心.

3. 阻塞，就是调用我（s端被调用者，函数），我（s端被调用者，函数）没有接收完数据或者没有得到结果之前，我不会返回。

4. 非阻塞，就是调用我（s端被调用者，函数），我（s端被调用者，函数）立即返回，通过select通知调用者
