---
layout:     post
title:      "Flask源码分析"
subtitle:   "Flask框架"
date:       2016-12-15
author:     “Aaron”
header-img: "img/post-08.jpg"
tags:
    - python
    - Flask
---

## 前言

本文将基于flask 0.1版本来分析flask的实现，试图理清flask中的一些概念，加深对flask的理解，提高对flask的认识。

![flask-01](/img/in-post/post-py-version/flask-01.png)

## 知识准备

**WSGI**

通过下面这张图，对web框架所处的位置和WSGI协议有一个直接的认识

![flask-02](/img/in-post/post-py-version/flask-02.png)

为了更好的理解WSGI，我们来看一个例子:

```python
from eventlet import wsgi
import eventlet

def hello(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    return ['Hello, World!\r\n']
wsgi.server(eventlet.listen(()'',8090)), hello)
```

定义一个hello函数，接受 environ 、start_response 两个参数，当 wsgi.server 调用函数hello时，会自动传递 environ、start_response两个参数，并接受hello函数的返回值，这就是 wsgi 的作用。

就是说，在python的世界里，通过WSGI约定了web服务器怎么调用web应用程序的代码 ，web应用程序需要符合什么样的规范，只要web应用程序和web服务器都遵守WSGI 协议，那么，web应用程序和web服务器就可以随意的组合。这也就是WSGI存在的原因。

**jinjia2**

Jinja2 是一个现代的，设计者友好的，仿照 Django 模板的 Python 模板语言。 它速度快，被广泛使用，并且提供了可选的沙箱模板执行环境保证安全:

最基本的方式就是通过 Template 创建一个模板并渲染它

```python
>>>from jinja2 import Template
>>> template = Template('Hello {{ name }}!')
>>> template.render(name='John Doe')
u'Hello John Doe!'
```

**Werkzeug**

Werkzeug 是一个 WSGI 工具包。WSGI 是一个 Web 应用和服务器通信的协议，Web 应用 可以通过 WSGI 一起工作。

一个基本的 “Hello World” WSGI 应用如下:

```python
def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    return ['Hello World!']
```

上面这小段代码就是WSGI协议的约定，它有一个可调用的start_response 。environ包含了所有进来的信息。 start_response用来表明已经收到一个响应。 通过Werkzeug，我们可以不必直接处理请求或者响应这些底层的东西，它已经为我们封装好了这些。

请求数据需要environ对象，Werkzeug允许我们以一个轻松的方式访问数据。响应对象是一个WSGI应用，提供了更好的方法来创建响应。如下所示：

```python
from werkzeug.wrapper import Response

def application(environ, start_response):
  response = Response('Hello World', mimetype='text/plain')
  return response(environ, start_response)
```

这里有一个在 URL 中查询字符串的扩展版本(重点是 URL 中的 name 将会替代 World):

```python
from werkzeug.wrapper import Response, Request

def application(environ, start_response):
    request = Request(environ)
    text = 'Hello %s !' % request.args.get('name', 'World')
    response = Response(text, mimetype='text/plain')
    return response(environ, start_response)
```

## 理解wsgi, Werkzeug, flask之间的关系

Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架。对于Werkzeug，它只是工具包，其用于接收http请求并对请求进行预处理，然后触发Flask框架，开发人员基于Flask框架提供的功能对请求进行相应的处理，并返回给用户，如果要返回给用户复杂的内容时，需要借助jinja2模板来实现对模板的处理。将模板和数据进行渲染，将渲染后的字符串返回给用户浏览器。

**Flask本身只是Werkzeug和Jinja2的之间的桥梁，前者实现一个合适的WSGI应用，后者处理模板**

## Flask源码分析

Flask的使用非常简单，官网的例子如下：

```python
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
  return 'Hello World'

if __name__  == "__main___"
   app.run()
```

每当我们需要创建一个flask应用时，我们都会创建一个Flask对象:

```python
app = Flask(__name__)
```

下面看一下Flask对象的__init__方法，如果不考虑jinjia2相关，核心成员就下面几个:

```python
class Flask:
    def __init__(self, package_name):

        self.package_name = package_name
        self.root_path = _get_package_path(self.package_name)

        self.view_functions = {}
        self.error_handlers = {}
        self.before_request_funcs = []
        self.after_request_funcs = []
        self.url_map = Map()
```

view_functions中保存了视图函数(处理用户请求的函数，如上面的hello())，error_handlers中保存了错误处理函数，before_request_funcs和after_request_funcs保存了请求的预处理函数和后处理函数。

self.url_map用以保存URI到视图函数的映射，即保存app.route()这个装饰器的信息，如下所示：

```python
def route(...):
    def decorator(f):
        self.add_url_rule(rule, f.__name__, **options)
        self.view_functions[f.__name__] = f
        return f
    return decorator
```

上面说到的是初始化部分，下面看一下执行部分，当我们执行app.run()时，调用堆栈如下:

```python
app.run()
    run_simple(host, port, self, **options)
        __call__(self, environ, start_response)
            wsgi_app(self, environ, start_response)
```

wsgi_app是flask核心:

```python
def wsgi_app(self, environ, start_response):
    with self.request_context(environ):
        rv = self.preprocess_request()  # 预处理函数
        if rv is None:
            rv = self.dispatch_request()  # 分发请求
        response = self.make_response(rv)
        response = self.process_response(response)  # 后处理函数
        return response(environ, start_response)
```

可以看到，wsgi_app这个函数的作用就是先调用所有的预处理函数，然后分发请求，再调用所有后处理函数，最后返回response。

看一下dispatch_request函数的实现，因为，这里有flask的错误处理逻辑:

```python
def dispatch_request(self):
    try:
        endpoint, values = self.match_request()
        return self.view_functions[endpoint](**values)
    except HTTPException, e:
        handler = self.error_handlers.get(e.code)
        if handler is None:
            return e
        return handler(e)
    except Exception, e:
        handler = self.error_handlers.get(500)
        if self.debug or handler is None:
            raise
        return handler(e)
```

如果出现错误，则根据相应的error code，调用不同的错误处理函数。

## Flask

打开flask.py文件，在Flask.py文件的末尾处，有以下几行代码:

```python
# context locals
_request_ctx_stack = LocalStack()
current_app = LocalProxy(lambda: _request_ctx_stack.top.app)
request = LocalProxy(lambda: _request_ctx_stack.top.request)
session = LocalProxy(lambda: _request_ctx_stack.top.session)
g = LocalProxy(lambda: _request_ctx_stack.top.g)
```

在flask的开发过程中，我们可以通过如下方式访问url中的参数:

```python
from flask import request

@app.route('/')
def hello():
    name = request.args.get('name', None)
```

看起来request像是一个全局变量，那么，一个全局变量为什么可以在一个多线程环境中随意使用呢，下面就随我来一探究竟吧！

先看一下全局变量 **_request_ctx_stack** 定义：

```python
_request_ctx_stack = LocalStack()
```

正如它LocalStack()的名字所暗示的那样，**_request_ctx_stack** 是一个栈, 显然，一个栈肯定会有push 、pop和top函数，如下所示:

```python
class LocalStack(object):

    def __init__(self):
        self._local = Local()

    def push(self, obj):
        rv = getattr(self._local, 'stack', None)
        if rv is None:
            self._local.stack = rv = []
        rv.append(obj)
        return rv

    def pop(self):
        stack = getattr(self._local, 'stack', None)
        if stack is None:
            return None
        elif len(stack) == 1:
            release_local(self._local)
            return stack[-1]
        else:
            return stack.pop()
```

按照我们的理解，要实现一个栈，那么LocalStack类应该有一个成员变量，是一个list，然后通过 这个list来保存栈的元素。然而，LocalStack并没有一个类型是list的成员变量， LocalStack仅有一个成员变量 **self._local = Local()**

我们来到了Werkzeug的源码中，到达了Local类的定义处:

```python
class Local(object):

    def __init__(self):
        object.__setattr__(self, '__storage__', {})
        object.__setattr__(self, '__ident_func__', get_ident)

    def __getattr__(self, name):
        try:
            return self.__storage__[self.__ident_func__()][name]
        except KeyError:
            raise AttributeError(name)

    def __setattr__(self, name, value):
        ident = self.__ident_func__()
        storage = self.__storage__
        try:
            storage[ident][name] = value
        except KeyError:
            storage[ident] = {name: value}
```

需要注意的是，Local类有两个成员变量，分别是__storage__和__ident_func__，其中，前者 是一个字典，后者是一个函数,这个函数的含义是，获取当前线程的id（或协程的id）。

此外，我们注意到，Local类自定义了__getattr__和__setattr__这两个方法，也就是说，我们在操作self.local.stack时， 会调用__setattr__和__getattr__方法。

```python
_request_ctx_stack = LocalStack()
    _request_ctx_stack.push(item)
            # 注意，这里赋值的时候，会调用__setattr__方法
            self._local.stack = rv = [] ==> __setattr__(self, name, value)
```

而__setattr的定义如下:

```python
def __setattr__(self, name, value):
    ident = self.__ident_func__()
    storage = self.__storage__
    try:
        storage[ident][name] = value
    except KeyError:
        storage[ident] = {name: value}
```

在__setattr__中，通过__ident_func__获取到了一个key，然后进行赋值。自此，我们可以知道， LocalStack是一个全局字典，或者说是一个名字空间。这个名字空间是所有线程共享的。 当我们访问字典中的某个元素的时候，会通过__getattr__访问,先通过线程id， 找当前这个线程的数据，然后进行访问

字段的内容如下：
```python
{'thread_id':{'stack':[]}}

{'thread_id1':{'stack':[_RequestContext()]},
    'thread_id2':{'stack':[_RequestContext()]}}
```

最后，我们来看一下其他几个全局变量:

```python
current_app = LocalProxy(lambda: _request_ctx_stack.top.app)
request = LocalProxy(lambda: _request_ctx_stack.top.request)
session = LocalProxy(lambda: _request_ctx_stack.top.session)
g = LocalProxy(lambda: _request_ctx_stack.top.g)
```

读者可以自行看一下LocalProxy的源码，LocalProxy仅仅是一个代理（可以想象设计模式中的代理模式）。
通过LocalStack和LocalProxy这样的Python魔法，每个线程访问当前请求中的数据(request, session)时， 都好像都在访问一个全局变量，但是，互相之间又互不影响,这就是Flask为我们提供的便利。
